Step 1: Create The Office Namespace

    kubectl create namespace office

Step 2: Create a private key for your user.

    sudo openssl genrsa -out nishanth.key 2048

Step 3: Create a certificate sign request nishanth.csr using the private key you just created

    sudo openssl req -new -key nishanth.key -out nishanth.csr -subj "/CN=nishanth/O=microfocus"

Step 4: Locate your Kubernetes cluster certificate authority (CA)

    cd etc/kubernetes/pki/

Step 5: Export the location of the CA files, so that we can use from any where

    export CA_LOCATION=`pwd`

Step 6: Verify the CA_LOCATION

    echo $CA_LOCATION

Step 7: Generate the final certificate nishanth.crt by approving the certificate sign request, nishanth.csr, you made earlier

    sudo openssl x509 -req -in nishanth.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out nishanth.crt -days 500

    Note: Save both nishanth.crt and nishanth.key in a safe location

Step 8: Add new credentials for your Kubernetes cluster

    kubectl config set-credentials nishanth --client-certificate=nishanth.crt  --client-key=nishanth.key

Step 9: Set the context for Nishanth in Kubernetes cluster

    kubectl config set-context nishanth-context --cluster=kubernetes --namespace=office --user=nishanth

Step 10: Check weather you are able to access any pods using the nishanth context

    kubectl --context=nishanth-context get pods

Step 11: Create The Role For Managing Deployments

    kubectl create -f 01-role-deployment-manager.yaml

Step 12: Bind The Role To The nishanth User

    kubectl create -f 02-rolebinding-deployment-manager.yaml

Step 13: Lets test the rule now

    kubectl --context=nishanth-context run --image nginx nishanth-nginx

    kubectl --context=nishanth-context get pods

Step 14: Now Run the above commands for a differnt namespace

    kubectl --context=nishanth-context get pods --namespace=default







